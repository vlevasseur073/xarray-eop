name: CI

on: [push]

jobs:
  # linter:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.11"]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install .[linter]
  #   - name: Analysing the code with flake8
  #     run: |
  #       python -m flake8 xarray_eop tests --output-file linter.txt
  formatter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[formatter]
    - name: Analysing the code with black and isort
      run: |
        python -m black --check --diff .
        python -m isort xarray_eop tests --check --diff --profile black

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[tests]
    - name: Running unit tests with pytest
      env:
        AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ENDPOINT_URL : ${{ secrets.AWS_ENDPOINT_URL }}
      run: |
        python -m pytest \
          --cov=xarray_eop \
          --junit-xml=.reports/TEST-pytests.xml \
          --cov-report=xml:.reports/coverage.xml \
          -m unit

  docstr-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[doc-cov]
    - name: Running docstr-coverage
      run: |
        docstr-coverage -f -P -m -F 5 -b docstr_coverage.svg
    - name: Upload badge
      uses: actions/upload-artifact@v4
      with:
        name: docstr-coverage-badge
        path: docstr_coverage.svg
