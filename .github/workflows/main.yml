name: CI

on: [push]

env:
  SOURCES: xarray_eop
  TESTS: tests


jobs:
  # linter:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.11"]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install .[linter]
  #   - name: Analysing the code with flake8
  #     run: |
  #       python -m flake8 ${SOURCES} ${TESTS} --output-file linter.txt
  formatter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[formatter]
    - name: Analysing the code with black and isort
      run: |
        python -m black --check --diff .
        python -m isort ${SOURCES} ${TESTS} --check --diff --profile black

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[security]
    - name: Security checks
      run: |
        pip freeze > requirements.txt
        python -m bandit -c bandit.yml -r ${SOURCES}
        python -m bandit -c bandit.yml -r ${SOURCES} -f json -o vulnerability.json

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[tests]
    - name: Running unit tests with pytest
      env:
        AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ENDPOINT_URL : ${{ secrets.AWS_ENDPOINT_URL }}
      run: |
        python -m pytest \
          --cov=${SOURCES} \
          --junit-xml=.reports/TEST-pytests.xml \
          --cov-report=xml:.reports/coverage.xml \
          -m unit

  docstr-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[doc-cov]
    - name: Running docstr-coverage
      run: |
        docstr-coverage -f -P -m -F 5 ${SOURCES} -b docstr_coverage.svg
    - name: Upload badge
      uses: actions/upload-artifact@v4
      with:
        name: docstr-coverage-badge
        path: docstr_coverage.svg
    - name: Deploy badge to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        publish_branch: gh-pages

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build release distribution
      run:
        - pip wheel -w dist --no-deps .
    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/
