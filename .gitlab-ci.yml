default:
  image:
    python:3.11

stages:
  - unit tests
  - build
  - deliver
  - doc
  - deploy

variables:
  BRANCH_NAME: $CI_COMMIT_REF_NAME
  REPORTS: .reports
  PACKAGE_NAME: xarray-eop-docs
  PACKAGE_FILENAME: ${PACKAGE_NAME}.tar.gz
  SOURCES: xarray_eop
  TESTS: tests

formater:
  stage: unit tests
  before_script:
    # Although the container image includes the CPM and its dependencies,
    # the 'pip install' is kept in case the dependencies are changed by
    # the child project with regards to the CPM ones.
    # In this case, creating a specific build image should be considered.
    - pip install .[formatter]
  script:
    - python -m black --check --diff .
    - python -m isort ${SOURCES} ${TESTS} --check --diff --profile black

unit-tests:
  stage: unit tests
  before_script:
    # Although the container image includes the CPM and its dependencies,
    # the 'pip install' is kept in case the dependencies are changed by
    # the child project with regards to the CPM ones.
    # In this case, creating a specific build image should be considered.
    - pip install .[tests]
  script:
    - >-
      python -m pytest
      --cov=${SOURCES}
      --junit-xml=${REPORTS}/TEST-pytests.xml
      --cov-report=xml:${REPORTS}/coverage.xml
      -m unit
  artifacts:
    expire_in: 1h
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $REPORTS/coverage.xml
      junit: $REPORTS/TEST-*.xml
    paths:
      - ${REPORTS}
      - .coverage

security:
  stage: unit tests
  before_script:
    # Although the container image includes the CPM and its dependencies,
    # the 'pip install' is kept in case the dependencies are changed by
    # the child project with regards to the CPM ones.
    # In this case, creating a specific build image should be considered.
    - pip install .[security]
  script:
    # Generate requirements.txt file for runtime dependencies
    # Using pip avoids depending on the structure of the 'pyproject.toml'.
    # The 'requirements.txt' is used by the 'deps-sec' job.
    - pip freeze > requirements.txt
    - python -m bandit -c bandit.yml -r ${SOURCES}
    - >-
      python -m bandit -c bandit.yml -r ${SOURCES}
      -f json -o vulnerability.json
  artifacts:
    expire_in: 1h
    paths:
      - vulnerability.json
      - requirements.txt

deps-sec:
  stage: unit tests
  image:
    name: aquasec/trivy:0.36.0
    entrypoint: [""]
  needs: [security]
  dependencies:
    - security
  script:
    # Report for user
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed ./
  allow_failure: true

docs-cov:
  stage: unit tests
  before_script:
    # Although the container image includes the CPM and its dependencies,
    # the 'pip install' is kept in case the dependencies are changed by
    # the child project with regards to the CPM ones.
    # In this case, creating a specific build image should be considered.
    - pip install .[doc-cov]
  script:
    - docstr-coverage -f -P -m -F 30 ${SOURCES} -b docstrcov.svg
  artifacts:
    paths:
      - docstrcov.svg
  allow_failure: true

# BUILD SECTION
build-package:
  stage: build
  script:
    - pip wheel -w dist --no-deps .
  artifacts:
    paths:
    - dist/

# DELIVER SECTION
deliver-package:
  stage: deliver
  needs: [build-package]
  dependencies:
    - build-package
  script:
    # Although the container image includes the CPM and its dependencies,
    # the 'pip install' is kept in case the dependencies are changed by
    # the child project with regards to the CPM ones.
    # In this case, creating a specific build image should be considered.
    - pip install twine
    - >-
      TWINE_PASSWORD=${CI_REGISTRY_PASSWORD}
      TWINE_USERNAME=${CI_REGISTRY_USER}
      python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - if: $CI_COMMIT_TAG

build-doc:
  stage: doc
  before_script:
    - pip install .[doc]
  script:
    - sphinx-build -b html docs/source test-docs
  artifacts:
    name: 'xarray-eop-docs'
    expose_as: 'Documentation'
    paths:
      # Allow consulting the generated documentation without
      # overwriting the "official" documentation made available with
      # GitLab Pages.
      - test-docs/
    expire_in: 1 week

deploy-doc:
  stage: deploy
  needs:
    - build-doc
  before_script:
    - apt-get update && apt-get --yes install jq
  script:
    # List the existing packages to obtain the URL allowing to delete
    # a package.
    # The first time the pipeline is run, no documentation archive will be
    # present in the project's package registry.
    # - 'curl --output packages.json --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?package_name=${PACKAGE_NAME}&order_by=version&sort=desc"'
    # - PACKAGE_VERSIONS=`jq --raw-output ".[].version" packages.json`

    # Create archive with the current branch/tag's documentation.
    # Other/previous versions are already stored in dedicated package versions.
    - mkdir -p public
    - mv test-docs public/${BRANCH_NAME}
    - tar cfz ${PACKAGE_FILENAME} public/${BRANCH_NAME}

    # GitLab allows storing multiple files under the same package/version.
    # If the same archive file (same filename) is uploaded multiple times,
    # GitLab will store multiple versions of the file.
    # See https://docs.gitlab.com/ee/user/packages/generic_packages/index.html#publishing-a-package-with-the-same-name-or-version
    # To not explode, the previous package is therefore removed before
    # uploading the new documentation archive.
    #
    # Retrieve the delete link of the package for the current branch/tag
    # The version will not exist the first time the documentation
    # is built for a given branch/tag.
    #- DELETE_URL=`jq --raw-output ".[] | select(.version == \"${BRANCH_NAME}\") | ._links.delete_api_path" packages.json`
    #- |
    #  if [[ "_${DELETE_URL}" != "_" ]]; then
    #    echo "Deleting package: ${DELETE_URL}"
    #    curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --request DELETE "${DELETE_URL}"
    #  fi

    # Upload archive
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --request PUT --upload-file ${PACKAGE_FILENAME} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${BRANCH_NAME}/${PACKAGE_FILENAME}"'
